# =============================================================================
# TEMPLATE BASE AUDIT - (BLOCK)
# =============================================================================

.base-audit:
  image: registry.stefanini.io/shared/devops/images/lynis:latest
  allow_failure: true
  stage: reports
  variables:
    GIT_STRATEGY: fetch
  before_script:
    - |
      function run_audit(){
        /usr/local/lynis/lynis audit dockerfile ${CI_PROJECT_DIR}/Dockerfile --verbose --debug
        cat /var/log/lynis.log > ${CI_PROJECT_DIR}/lynis.log
        cat /var/log/lynis-report.dat > ${CI_PROJECT_DIR}/lynis.dat
        ruby /usr/src/code/block.rb -p ${CI_PROJECT_DIR}/lynis.log
      }
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    when: on_failure
    paths: [lynis.log, lynis.dat]
    expire_in: "30 day"
  dependencies: []

# =============================================================================
# TEMPLATE BASE SONAR - (BLOCK)
# =============================================================================

.base-sonar:
  image: registry.stefanini.io/shared/devops/images/sonar:latest
  extends:
    - .default:rules-sonar
  allow_failure: true
  stage: reports
  variables:
    GIT_STRATEGY: fetch
    SONAR_URL: https://sonarqube-dev.develop.stefanini.io
    SONAR_PROJECT_KEY: ${CI_PROJECT_PATH_SLUG}
    SONAR_ANALYSIS_MODE: publish
  before_script:
    - |
      if [ -z "${SONAR_TOKEN}" ]
      then
        echo -e "\nPlease, we need the Sonar Token. Exit..." && exit 1
      fi
  dependencies: []

# =============================================================================
# TEMPLATE BASE BUILD - (NO BLOCK)
# =============================================================================

.base-build:
  extends:
    - .default:retry-always
  allow_failure: false
  stage: build
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
  dependencies: []

# =============================================================================
# TEMPLATE BASE SCANNING - (BLOCK)
# =============================================================================

.base-scanning:
  allow_failure: true
  stage: scanning
  before_script:
    - apk add --update --no-cache wget ca-certificates bash
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64 && touch clair-whitelist.yml
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - docker container run -d --name db arminc/clair-db:latest
    - docker container run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - mv ./clair-scanner_linux_amd64 ./clair-scanner
    - chmod +x ./clair-scanner
    - while( ! wget -q -O /dev/null http://$(hostname):6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo -e "\nWaiting for clair daemon to start.\n"
    - while( ! wget -T 10 -q -O /dev/null http://$(hostname):6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ ${retries} -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths: [gl-container-scanning-report.json]
    when: on_failure
    expire_in: "30 day"
  dependencies: []

# =============================================================================
# TEMPLATE BASE DEPLOY - (NO BLOCK)
# =============================================================================

.base-deploy:
  image: registry.stefanini.io/shared/devops/deploy/k8s:3a2a597f
  extends:
    - .default:retry-always
  allow_failure: false
  stage: deploy
  dependencies: []

# =============================================================================
# TEMPLATE WEB BASE PERFORMANCE - (BLOCK)
# =============================================================================

.base-web-performance:
  image: registry.stefanini.io/shared/devops/images/sitespeed:latest
  extends:
    - .default:rules-web-performance
  allow_failure: true
  stage: web
  variables:
    BROWSER_PERFORMANCE_URL: https://gitlab.com/gitlab-org/gl-performance/raw/master/index.js
    SITESPEED_VERSION: 12.0.1
    SITESPEED_OPTIONS: ""
    URL: http://${CI_PROJECT_PATH_SLUG}.${CI_COMMIT_REF_SLUG}.stefanini.io
  before_script:
    - mkdir gitlab-exporter && mkdir sitespeed-results
    - touch performance.json && touch sitespeed-results/performance.json
    - wget -O ./gitlab-exporter/index.js ${BROWSER_PERFORMANCE_URL} && sleep 20s
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    when: always
    paths: [performance.json, sitespeed-results/]
    expire_in: "15 day"
    reports:
      performance: performance.json
  dependencies: []

# =============================================================================
# TEMPLATE BASE DAST
# =============================================================================

.base-dast:
  extends:
    - .default:rules-dast
  allow_failure: true
  stage: web
  variables:
    URL: http://${CI_PROJECT_PATH_SLUG}.${CI_COMMIT_REF_SLUG}.stefanini.io
  before_script:
    - export DAST_VERSION=${SP_VERSION:-$(echo "${CI_SERVER_VERSION}" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')}
    - |
      function dast_run(){
        docker run \
        --env DAST_FULL_SCAN_ENABLED \
        --env DAST_TARGET_AVAILABILITY_TIMEOUT \
        --volume "${PWD}:/output" \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        -w /output \
        "registry.gitlab.com/gitlab-org/security-products/dast:${DAST_VERSION}" \
        /analyze -t ${URL}
      }
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    when: always
    paths: [gl-dast-report.json]
    expire_in: "30 day"
    reports:
      dast: gl-dast-report.json
  dependencies: []
